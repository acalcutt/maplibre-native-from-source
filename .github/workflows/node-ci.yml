name: node-ci

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - node-*.*.x
    tags:
      - "node-*"

  pull_request:
    branches:
      - "*"

concurrency:
  # cancel jobs on PRs only
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  test:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-24.04
            arch: x86_64
          - runs-on: ubuntu-24.04-arm
            arch: arm64
          - runs-on: macos-13
            arch: x86_64
          - runs-on: macos-14
            arch: arm64
          - runs-on: windows-2022
            arch: x86_64
          - runs-on: windows-11-arm
            arch: arm64
    continue-on-error: true
    env:
      BUILDTYPE: "Release"

    defaults:
      run:
        working-directory: ./
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Initialize and Update Submodules
        shell: bash
        run: |
          echo "Fetching submodule HEADs..."
          git submodule sync --recursive
          echo "Updating submodules..."
          git -c core.longpaths=true submodule update --init --force --recursive || echo "Submodule update had some issues, continuing..."

      - name: Get OS Architecture
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        run: uname -m

      - name: Install dependencies (MacOS)
        if: runner.os == 'MacOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
        run: |
          brew list ccache || brew install ccache
          brew list ninja || brew install ninja
          brew list pkg-config || brew install pkg-config
          brew list glfw || brew install glfw
          brew list libuv || brew install libuv

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ccache \
            ninja-build \
            pkg-config \
            xvfb \
            libcurl4-openssl-dev \
            libglfw3-dev \
            libuv1-dev \
            libjpeg-dev \
            libpng-dev \
            libwebp-dev
          /usr/sbin/update-ccache-symlinks

      - name: Use Node.js from nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: npm ci
        run: npm ci --ignore-scripts

      - name: Set up msvc dev cmd (Windows x64)
        if: runner.os == 'Windows' && matrix.arch == 'x86_64'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up msvc dev cmd (Windows ARM64)
        if: runner.os == 'Windows' && matrix.arch == 'arm64'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_arm64

      - name: Test VSCMD_ARG_TGT_ARCH Environment
        if: runner.os == 'Windows'
        run: |
          echo "VSCMD_ARG_TGT_ARCH=%VSCMD_ARG_TGT_ARCH%"
        shell: cmd
  
      - name: cmake version
        run: |
          cmake --version

      - name: Set up ccache (MacOS/Linux)
        if: runner.os == 'MacOS' || runner.os == 'Linux'
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}

      - name: Set up ccache (Windows)
        if: runner.os == 'Windows'
        uses: hendrikmuhs/ccache-action@v1
        with:
          variant: "sccache"
          key: ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}-${{ github.sha }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}-${{ github.ref }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}-${{ github.job }}
            ${{ matrix.runs-on }}-${{ matrix.arch }}-${{ env.BUILDTYPE }}

      - name: Build MapLibre-Native with CMake Presets
        run: |
          node ./scripts/build-maplibre.js

      - name: Cache cmake-node-module deps
        uses: actions/cache@v4
        with:
          path: maplibre-native/build
          key: ${{ runner.os }}-${{ runner.arch }}-cmake-node-module-deps

      - name: Run render tests on macOS
        id: render_tests
        if: runner.os == 'macOS'
        working-directory: maplibre-native
        continue-on-error: ${{ runner.arch == 'X64' }}
        run: ./build/mbgl-render-test-runner --manifestPath metrics/macos-xcode11-release-style.json

      - name: Upload render test artifacts (MacOS)
        if: runner.os == 'MacOS' && steps.render_tests.outcome == 'failure'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: render-query-test-results_${{ runner.os }}_${{ matrix.arch }}
          path: maplibre-native/metrics/macos-xcode11-release-style.html

      - name: Test (Linux)
        working-directory: maplibre-native/platform/node
        if: runner.os == 'Linux'
        run: xvfb-run --auto-servernum npm test

      - name: Test (MacOS)
        if: runner.os == 'MacOS'
        continue-on-error: true  # flaky on CI
        working-directory: maplibre-native/platform/node
        run: npm test

      - name: Test (Windows x64)
        if: runner.os == 'Windows' && matrix.arch == 'x86_64'
        shell: pwsh
        working-directory: maplibre-native/platform/node
        env:
          LIBGL_ALWAYS_SOFTWARE: true
          GALLIUM_DRIVER: llvmpipe
        run: |
          (Invoke-WebRequest https://api.github.com/repos/pal1000/mesa-dist-win/releases -Headers @{ Authorization = ('Bearer {0}' -f '${{ secrets.GITHUB_TOKEN }}') } | ConvertFrom-Json)[0].assets | Where-Object name -match 'mesa3d-.+-release-msvc\.7z' | foreach { Invoke-WebRequest $_.browser_download_url -OutFile mesa3d.7z }
          & 'C:\Program Files\7-Zip\7z.exe' e -olib\node-v137 .\mesa3d.7z x64\opengl32.dll x64\libgallium_wgl.dll x64\libGLESv2.dll
          npm test

      - name: Test (Windows ARM64)
        if: runner.os == 'Windows' && matrix.arch == 'arm64'
        shell: pwsh
        working-directory: maplibre-native/platform/node
        env:
          LIBGL_ALWAYS_SOFTWARE: true
          GALLIUM_DRIVER: llvmpipe
        run: |
          (Invoke-WebRequest https://api.github.com/repos/mmozeiko/build-mesa/releases -Headers @{ Authorization = ('Bearer {0}' -f '${{ secrets.GITHUB_TOKEN }}') } | ConvertFrom-Json)[0].assets | Where-Object name -match 'mesa-llvmpipe-arm64-.+\.7z' | foreach { Invoke-WebRequest $_.browser_download_url -OutFile mesa3d.7z }
          & 'C:\Program Files\7-Zip\7z.exe' e -olib\node-v137 .\mesa3d.7z opengl32.dll libGLESv2.dll
          npm test

      - name: Pack
        run: |
          npm pack --dry-run
